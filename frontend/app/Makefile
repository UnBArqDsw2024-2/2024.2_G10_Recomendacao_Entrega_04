COMPOSE_FILE = compose.yaml

DEV_SERVICE = dev
PROD_SERVICE = prod

.PHONY: build-dev
build-dev:
	@echo "ðŸ”¨ Construindo o serviÃ§o de desenvolvimento..."
	docker compose -f $(COMPOSE_FILE) build $(DEV_SERVICE)

.PHONY: build-prod
build-prod:
	@echo "ðŸ”¨ Construindo o serviÃ§o de produÃ§Ã£o..."
	docker compose -f $(COMPOSE_FILE) build $(PROD_SERVICE)

.PHONY: up-dev
up-dev:
	@echo "ðŸš€ Iniciando o serviÃ§o de desenvolvimento..."
	docker compose -f $(COMPOSE_FILE) up $(DEV_SERVICE)

.PHONY: up-prod
up-prod:
	@echo "ðŸš€ Iniciando o serviÃ§o de produÃ§Ã£o..."
	docker compose -f $(COMPOSE_FILE) up $(PROD_SERVICE)

.PHONY: stop
stop:
	@echo "ðŸ›‘ Parando todos os serviÃ§os..."
	docker compose -f $(COMPOSE_FILE) stop

.PHONY: down
down:
	@echo "ðŸ§¹ Removendo todos os serviÃ§os..."
	docker compose -f $(COMPOSE_FILE) down

.PHONY: logs-dev
logs-dev:
	@echo "ðŸ“‹ Exibindo logs do serviÃ§o de desenvolvimento..."
	docker compose -f $(COMPOSE_FILE) logs -f $(DEV_SERVICE)

.PHONY: logs-prod
logs-prod:
	@echo "ðŸ“‹ Exibindo logs do serviÃ§o de produÃ§Ã£o..."
	docker compose -f $(COMPOSE_FILE) logs -f $(PROD_SERVICE)

.PHONY: clean
clean:
	@echo "ðŸ§¹ Removendo containers, volumes e redes..."
	docker compose -f $(COMPOSE_FILE) down --volumes --remove-orphans
	@echo "ðŸ§¹ Limpando recursos nÃ£o utilizados do Docker..."
	docker system prune -f
